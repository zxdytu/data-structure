#include<iostream>

#define ElemType int
#define Status int
#define ERROR 1
#define OK 0


using namespace std;

//多项式链表节点结构
typedef struct PNode
{
	float coef;
	int expn;
	struct PNode* next;
}PNode,*Polynomial;


//创建多项式
void CreatePolyn(Polynomial& P, int n)
{
	P = new PNode;
	P->next = NULL;//创建头节点

	for (int i = 0; i < n; i++)//输入n个节点数据
	{
		Polynomial s = new PNode;
		cout << "please input coef of " << i << endl;
		cin >> s->coef;
		cout << "please input expn of " << i << endl;
		cin >> s->expn;
		Polynomial prep = P;//prep用于保存q的前驱，初值为头节点
		Polynomial q = P->next;//q初始化，指向首元节点
		while (q && q->coef < s->coef)
		{
			prep = q;//前驱
			q = q->next;
		}
		s->next = q;
		prep->next = s;
	}
}

//多项式的相加
void AddPolyn(Polynomial& pa, Polynomial& pb)
{
	Polynomial p1 = pa->next;
	Polynomial p2 = pb->next;
	Polynomial p3 = pa;
	while (p1 && p2)
	{
		if (p1->expn == p2->expn)
		{
			int sum = p1->coef + p2->coef;
			if (sum != 0)
			{
				p1->coef = sum;
				p3->next = p1;
				p3 = p1;
				p1 = p1->next;
				Polynomial r = p2;
				p2 = p2->next;
				delete r;
			}
			else
			{
				Polynomial r = p1;
				p1 = p1->next;
				delete r;
				r = p2;
				p2 = p2->next;
				delete r;
			}
		}
		else if (p1->expn < p2->expn)
		{
			p3->next = p1;
			p3 = p1;
			p1 = p1->next;
		}
		else
		{
			p3->next = p2;
			p3 = p2;
			p2 = p2->next;
		}
	}

	p3->next = p1 ? p1 : p2;
	delete pb;
}

int main()
{

	return 0;
}
