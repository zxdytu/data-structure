#include<iostream>

#define ElemType int
#define Status int
#define OVERFLOW 2
#define ERROR 1
#define OK 0

#define MAXSIZE 100

using namespace std;

//顺序表存储结构
typedef struct
{
	ElemType* elem;
	int length;
}SqList;

//顺序表初始化
Status InitList(SqList& L)
{
	L.elem = new ElemType[MAXSIZE];
	if (!L.elem)
	{
		exit(OVERFLOW);
	}
	L.length = 0;
	return OK;
}

//顺序表的取值
Status GetElem(SqList L, int i, ElemType& e)
{
	if (i<1 || i>L.length)
	{
		return ERROR;
	}
	e = L.elem[i - 1];
	return OK;
}

//顺序表的查找
int LocateElem(SqList L, ElemType e)
{
	for (int i = 0; i < L.length; i++)
	{
		if (L.elem[i] == e)
		{
			return i + 1;
		}
	}
	return 0;
}

//顺序表的插入
Status ListInsert(SqList& L, int i, ElemType e)//i表示位置
{
	if ((i < 1) || (i > L.length + 1))
	{
		return ERROR;
	}
	if (L.length == MAXSIZE)
	{
		return ERROR;
	}
	for (int j = L.length - 1; j >= i - 1; --j)
	{
		L.elem[j + 1] = L.elem[j];
	}
	L.elem[i - 1] = e;
	++L.length;
	return OK;
}

//顺序表的删除
Status ListDelete(SqList& L, int i)
{
	if ((i < 1) || (i > L.length))
	{
		return ERROR;
	}
	for (int j = i; j < L.length - 1; ++j)
	{
		L.elem[j - 1] = L.elem[j];
	}
	--L.length;
	return OK;
}

//顺序有序表的合并
void MergeList_Sq(SqList LA, SqList LB, SqList& LC)
{
	LC.length = LA.length + LB.length;
	LC.elem = new ElemType[LC.length];
	ElemType* pc = LC.elem;//首元素指针
	ElemType* pa = LA.elem;
	ElemType* pb = LB.elem;
	ElemType* pa_last = LA.elem + LA.length - 1;
	ElemType* pb_last = LB.elem + LB.length - 1;
	while ((pa <= pa_last) && (pb <= pb_last))
	{
		if (*pa <= *pb)
		{
			*pc++ = *pa++;
		}
		else
		{
			*pc++ = *pb++;
		}
	}
	while (pa <= pa_last)
	{
		*pc++ = *pa++;
	}
	while (pb <= pb_last)
	{
		*pc++ = *pb++;
	}
}

int main()
{

	return 0;
}
